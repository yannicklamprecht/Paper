From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Fritz Windisch <friwidev@gmail.com>
Date: Thu, 15 Jun 2023 17:10:22 +0200
Subject: [PATCH] Fix multiple spectator bugs

Fixes MC-261799: Spectator mode not teleporting viewers to targets in other worlds or viewers bug around (stuck) when a target changes world
Fixes MC-107113: Spectator mode viewers stuck when target is teleported more than viewing distance
Fixes MC-148993: Chunks go invisible when target moves too far over time while viewing (render POI on client is not updated)

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 12109446fc76a39faee6cda042ca48b3fd3809f4..e426e055e85bd2e724e6ec5d0795e7672a66404b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1414,6 +1414,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 double d1 = vec3d_dx * vec3d_dx + vec3d_dz * vec3d_dz; // Paper
                 double d2 = d0 * d0;
                 boolean flag = d1 <= d2 && this.entity.broadcastToPlayer(player) && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().x, this.entity.chunkPosition().z);
+                flag |= player.getCamera() == this.entity; // Paper - Make entities always visible for spectators, even when teleported far away (MC-107113)
                 // Paper start - Configurable entity tracking range by Y
                 if (flag && level.paperConfig().entities.trackingRangeY.enabled) {
                     double rangeY = level.paperConfig().entities.trackingRangeY.get(this.entity, -1);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 58591bf2f63b9c5e97d9ce4188dff3366968a178..582a12363894aa722fdec3e6f7e49ccbdc830078 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -744,8 +745,28 @@ public class ServerPlayer extends Player {
 
         if (entity != this) {
             if (entity.isAlive()) {
-                this.absMoveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
-                this.serverLevel().getChunkSource().move(this);
+                // Paper start - Fix spectator on cross-world teleports (MC-261799)
+                if (entity.level() != this.level()) {
+                    // Teleport ourselves to our camera
+                    this.getBukkitEntity().teleport(entity.getBukkitEntity().getLocation(), TeleportCause.SPECTATE);
+                    // Update the tracker of the other dimension for our cross-dimension teleport
+                    ChunkMap.TrackedEntity tracker = ((ServerLevel) entity.level()).getChunkSource().chunkMap.entityMap.get(entity.getId());
+                    if (tracker != null) {
+                        tracker.updatePlayer(this);
+                    }
+                    // Advise the client to start spectating again
+                    this.connection.send(new ClientboundSetCameraPacket(entity));
+                } else {
+                    // Paper: We send the player an additional teleport packet here to indicate that the position of itself has been moved when he moved to
+                    // another chunk. Without this packet, if a player travels a too far distance, chunks will start to become invisible for our spectator.
+                    // (MC-148993)
+                    if (!entity.chunkPosition().equals(this.chunkPosition())) {
+                        this.connection.internalTeleport(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot(), java.util.Collections.emptySet());
+                    }
+                    this.absMoveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
+                    this.serverLevel().getChunkSource().move(this);
+                }
+                // Paper end
                 if (this.wantsToStopRiding()) {
                     this.setCamera(this);
                 }
