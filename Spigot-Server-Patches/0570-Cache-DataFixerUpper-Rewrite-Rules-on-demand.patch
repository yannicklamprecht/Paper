From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 12 Sep 2020 17:21:38 -0400
Subject: [PATCH] Cache DataFixerUpper Rewrite Rules on demand

Mojang precaches every single potential rewrite rule that could ever
exist on server startup. This includes rules from all the way back to versions from 6+ years ago.

This is the source of why the server hogs every CPU core at 100% every start.

For anyone who hard resets for updates or has force upgraded their entire world, this
results in completely wasted cpu cycles.

This massive CPU usage also delays server startup time.

We improve this by making "min version to precache" that defaults to a future version
so that no rewrite rules are precached.

someone who expects to be converting a lot chunks could theoretically set
-DPaper.minPrecachedDatafixVersion=<dataVersionConvertingFrom> as a startup
parameter and only build from that point on.

However this will likely never be needed as the server will still run
the same cache logic on demand when it's actually needed. The only
cost would be some delay on the FIRST chunk conversion, but paper already
runs chunk conversions on another thread so this will likely never be
a concern for TPS.

This patch will significantly reduce CPU use on startup, reduce memory usage,
and improve server startup time.

diff --git a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..abc265b00044b14abb55c2628d454ee01fef467b
--- /dev/null
+++ b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
@@ -0,0 +1,87 @@
+// Copyright (c) Microsoft Corporation. All rights reserved.
+// Licensed under the MIT license.
+package com.mojang.datafixers;
+
+import com.google.common.collect.Lists;
+import com.mojang.datafixers.schemas.Schema;
+import com.mojang.datafixers.types.Type;
+import it.unimi.dsi.fastutil.ints.Int2ObjectAVLTreeMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectSortedMap;
+import it.unimi.dsi.fastutil.ints.IntAVLTreeSet;
+import it.unimi.dsi.fastutil.ints.IntBidirectionalIterator;
+import it.unimi.dsi.fastutil.ints.IntSortedSet;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.function.BiFunction;
+
+public class DataFixerBuilder {
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final int dataVersion;
+    private final Int2ObjectSortedMap<Schema> schemas = new Int2ObjectAVLTreeMap<>();
+    private final List<DataFix> globalList = Lists.newArrayList();
+    private final IntSortedSet fixerVersions = new IntAVLTreeSet();
+    private final int minDataFixPrecacheVersion; // Paper
+
+    public DataFixerBuilder(final int dataVersion) {
+        minDataFixPrecacheVersion = Integer.getInteger("Paper.minPrecachedDatafixVersion", dataVersion+1) * 10; // Paper - default to precache nothing - mojang stores versions * 10 to allow for 'sub versions'
+        this.dataVersion = dataVersion;
+    }
+
+    public Schema addSchema(final int version, final BiFunction<Integer, Schema, Schema> factory) {
+        return addSchema(version, 0, factory);
+    }
+
+    public Schema addSchema(final int version, final int subVersion, final BiFunction<Integer, Schema, Schema> factory) {
+        final int key = DataFixUtils.makeKey(version, subVersion);
+        final Schema parent = schemas.isEmpty() ? null : schemas.get(DataFixerUpper.getLowestSchemaSameVersion(schemas, key - 1));
+        final Schema schema = factory.apply(DataFixUtils.makeKey(version, subVersion), parent);
+        addSchema(schema);
+        return schema;
+    }
+
+    public void addSchema(final Schema schema) {
+        schemas.put(schema.getVersionKey(), schema);
+    }
+
+    public void addFixer(final DataFix fix) {
+        final int version = DataFixUtils.getVersion(fix.getVersionKey());
+
+        if (version > dataVersion) {
+            LOGGER.warn("Ignored fix registered for version: {} as the DataVersion of the game is: {}", version, dataVersion);
+            return;
+        }
+
+        globalList.add(fix);
+        fixerVersions.add(fix.getVersionKey());
+    }
+
+    public DataFixer build(final Executor executor) {
+        final DataFixerUpper fixerUpper = new DataFixerUpper(new Int2ObjectAVLTreeMap<>(schemas), new ArrayList<>(globalList), new IntAVLTreeSet(fixerVersions));
+
+        final IntBidirectionalIterator iterator = fixerUpper.fixerVersions().iterator();
+        while (iterator.hasNext()) {
+            final int versionKey = iterator.nextInt();
+            if (versionKey < minDataFixPrecacheVersion) continue; // Paper
+            final Schema schema = schemas.get(versionKey);
+            for (final String typeName : schema.types()) {
+                CompletableFuture.runAsync(() -> {
+                    final Type<?> dataType = schema.getType(() -> typeName);
+                    final TypeRewriteRule rule = fixerUpper.getRule(DataFixUtils.getVersion(versionKey), dataVersion);
+                    dataType.rewrite(rule, DataFixerUpper.OPTIMIZATION_RULE);
+                }, executor).exceptionally(e -> {
+                    LOGGER.error("Unable to build datafixers", e);
+                    Runtime.getRuntime().exit(1);
+                    return null;
+                });
+            }
+        }
+
+        return fixerUpper;
+    }
+}
